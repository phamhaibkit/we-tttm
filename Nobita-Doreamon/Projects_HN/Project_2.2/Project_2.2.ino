/*
  Chương trình đọc RFID từ RFID-RC522
  Cắm chân (Arduino Uno):
  SDA: Pin 10
  SCK: Pin 13
  MOSI: Pin 11
  MISO: Pin 12
  RST: Pin 9
*/

#include <SPI.h>
#include "RFID.h"
#include <U8glib.h>

#define SS_PIN 10
#define RST_PIN 9

int beepPin = 7;

RFID rfid(SS_PIN, RST_PIN);

int tag1[5] = {186 , 162, 171, 78, 253};
int tag2[5] = {181, 7, 83, 20, 245};
int newtag[5] = {0, 0, 0, 0, 0};



U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NO_ACK);  // Display which does not send AC

const uint8_t xuka[] PROGMEM = {
  0x00, 0x00, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00,
  0xC0, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x30, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x18, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x01, 0x80, 0x08, 0x07, 0x00, 0x40, 0x00, 0x80, 0x08, 0x0D, 0x00, 0xC0,
  0x00, 0x40, 0x08, 0x1F, 0x01, 0x40, 0x00, 0x60, 0x0C, 0x31, 0x82, 0x68, 0x00, 0x20, 0x04, 0x20,
  0x82, 0x27, 0xE0, 0x20, 0x02, 0x76, 0x84, 0x11, 0xA0, 0x30, 0x01, 0x59, 0x44, 0x19, 0x30, 0x10,
  0x01, 0xD6, 0x28, 0x19, 0x30, 0x10, 0x01, 0x0F, 0x18, 0x64, 0x30, 0x10, 0x03, 0x2F, 0x80, 0x4E,
  0x18, 0x10, 0x02, 0x2D, 0x80, 0x5F, 0x18, 0x10, 0x02, 0x29, 0x80, 0xFF, 0x08, 0x10, 0x01, 0x29,
  0x80, 0xB3, 0x08, 0x10, 0x01, 0x2F, 0x80, 0xB3, 0x08, 0x10, 0x01, 0x2F, 0x80, 0xB7, 0x18, 0x20,
  0x03, 0x2E, 0x80, 0xBF, 0x07, 0xA0, 0x02, 0x11, 0x00, 0xBE, 0x18, 0x40, 0x02, 0x0E, 0xC0, 0x5E,
  0x10, 0x40, 0x02, 0x00, 0xA0, 0x64, 0x13, 0x20, 0x02, 0x00, 0x80, 0x18, 0x14, 0x20, 0x06, 0x00,
  0x80, 0x00, 0x08, 0x60, 0x09, 0x00, 0x00, 0x00, 0x1C, 0x40, 0x11, 0x00, 0x00, 0x00, 0x14, 0x40,
  0x21, 0x81, 0x82, 0x00, 0x1C, 0x40, 0x20, 0x80, 0xFE, 0x00, 0x08, 0xA0, 0x60, 0x40, 0x00, 0x00,
  0x01, 0x10, 0x40, 0x60, 0x00, 0x00, 0x6E, 0x08, 0x40, 0x30, 0x00, 0x00, 0xF8, 0x08, 0x60, 0x68,
  0x00, 0x01, 0xA0, 0x04, 0xE0, 0xC6, 0x00, 0x07, 0x20, 0x04, 0xA3, 0x83, 0x00, 0x1D, 0x10, 0x04,
  0xBE, 0x05, 0xC0, 0xE8, 0xD0, 0x22, 0xE0, 0x0A, 0x7F, 0x10, 0xA8, 0x32, 0x00, 0x12, 0x39, 0xE0,
  0x9C, 0x1A, 0x00, 0x12, 0x26, 0x00, 0x8E, 0x1E, 0x00, 0x2C, 0xC2, 0x01, 0x45, 0x90, 0x00, 0x2D,
  0x81, 0x01, 0x86, 0x70, 0x00, 0x2D, 0x00, 0x81, 0x02, 0x00, 0x00, 0x6E, 0x00, 0x83, 0x02, 0x00,
  0x00, 0x48, 0x00, 0x42, 0x02, 0x00, 0x00, 0x48, 0x00, 0x46, 0x02, 0x00, 0x00, 0x48, 0x00, 0x2A,
  0x02, 0x00, 0x00, 0x48, 0x00, 0x36, 0x02, 0x00, 0x00, 0x48, 0x00, 0x04, 0x02, 0x00, 0x00, 0x48,
  0x00, 0x04, 0x02, 0x00, 0x00, 0x48, 0x00, 0x04, 0x02, 0x00, 0x00, 0x48, 0x00, 0x04, 0x02, 0x00,
  0x00, 0x48, 0x00, 0x04, 0x02, 0x00, 0x00, 0x48, 0x00, 0x04, 0x02, 0x00, 0x00, 0x4C, 0x00, 0x0C,
  0x04, 0x00, 0x00, 0x44, 0x00, 0x08, 0x04, 0x00, 0x00, 0x44, 0x00, 0x08, 0x04, 0x00, 0x00, 0xC4,
  0x00, 0x18, 0x04, 0x00, 0x00, 0xC2, 0x00, 0x10, 0x0C, 0x00, 0x00, 0xC2, 0x00, 0x10, 0x0C, 0x00
};

const uint8_t cake[] PROGMEM = {
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x30, 0x00, 0x00, 0x20, 0x00, 0x58,
  0x00, 0x38, 0x00, 0x00, 0x30, 0x00, 0xD8, 0x10, 0x78, 0x00, 0x00, 0x70, 0x08, 0xD0, 0x30, 0x6C,
  0x00, 0x00, 0xD0, 0x18, 0x70, 0x18, 0x6C, 0x00, 0x00, 0xD0, 0x18, 0x30, 0x18, 0x6C, 0x00, 0x00,
  0xD0, 0x38, 0x00, 0x58, 0x18, 0x00, 0x00, 0xF0, 0x2C, 0x60, 0x48, 0x18, 0x00, 0x00, 0x20, 0x2C,
  0x68, 0x70, 0x30, 0x00, 0x00, 0x60, 0x2C, 0x68, 0x70, 0x28, 0x00, 0x00, 0xC0, 0x10, 0x68, 0x20,
  0x2C, 0x00, 0x00, 0xC0, 0x10, 0x68, 0x20, 0x4C, 0x00, 0x00, 0xA0, 0x38, 0x68, 0x50, 0x4C, 0x00,
  0x01, 0x90, 0x28, 0x68, 0xD0, 0x4C, 0x00, 0x01, 0x90, 0x2B, 0x68, 0xDC, 0x4C, 0x00, 0x01, 0x90,
  0x6F, 0xEF, 0x9E, 0x4C, 0x00, 0x01, 0x97, 0xEF, 0xEF, 0xB3, 0xCF, 0x00, 0x01, 0x9F, 0x48, 0x78,
  0xB0, 0x4F, 0xC0, 0x07, 0x90, 0x48, 0x38, 0xB0, 0x48, 0xE0, 0x1E, 0x90, 0x68, 0x30, 0xB0, 0x28,
  0x30, 0x38, 0x60, 0x68, 0x00, 0xB0, 0x30, 0x18, 0x60, 0x60, 0x68, 0x00, 0xB0, 0x00, 0x0C, 0xC0,
  0x00, 0x68, 0x00, 0x60, 0x00, 0x1E, 0xD0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x73, 0xD8, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xE3, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x83, 0xC6, 0xC0, 0x00, 0x00, 0x03,
  0xDC, 0x03, 0xC0, 0xDE, 0x00, 0x00, 0x03, 0xC0, 0x03, 0xC0, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x03,
  0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0B, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x98, 0xE0, 0x00, 0x01,
  0x83, 0x11, 0x97, 0x89, 0xF8, 0x03, 0x03, 0xF3, 0x31, 0xBF, 0xE9, 0x0C, 0x03, 0x86, 0x32, 0xF3,
  0xF7, 0xEA, 0x06, 0x1C, 0xC6, 0x62, 0x23, 0x62, 0xEB, 0x03, 0xF0, 0x4C, 0x52, 0x37, 0x22, 0x6E,
  0x01, 0xE0, 0x78, 0x33, 0x1C, 0x06, 0x6C, 0x00, 0x00, 0x38, 0x33, 0x08, 0x06, 0x68, 0x00, 0x00,
  0x00, 0x33, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x13, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x1E,
  0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x03, 0xE0, 0x00,
  0x00, 0x00, 0x07, 0xC0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x77, 0xFE, 0x00, 0xFD,
  0xFC, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xBE, 0x00, 0x00,
  0x30, 0x78, 0x31, 0x34, 0x2C, 0x20, 0x30, 0x78
};

const uint8_t empty[] PROGMEM = {
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  };
int ok = -1;

bool flag = false;
void setup()
{
  Serial.begin(9600);
  pinMode(beepPin,OUTPUT);
  digitalWrite(beepPin, LOW);
  
  SPI.begin();

  rfid.init();

  u8g.firstPage();
      do {
        u8g.drawBitmapP(2, 0, 1, 8, empty);
      } while ( u8g.nextPage() );

  while (flag == false) {
    readTags();
  }
}

void loop()
{

}

boolean compareTag(int aa[5], int bb[5])
{
  boolean ff = false;
  int fg = 0;
  for (int cc = 0 ; cc < 5 ; cc++)
  {
    if (aa[cc] == bb[cc])
    {
      fg++;
    }
  }
  if (fg == 5)
  {
    ff = true;
  }
  return ff;
}

void checkTags() // compares each tag against the tag just read
{
  ok = 0; // this variable helps decision-making,
  // if it is 1 we have a match, zero is a read but no match,
  // -1 is no read attempt made
  if (compareTag(newtag, tag1) == true)
  {
    ok++;
  }
  if (compareTag(newtag, tag2) == true)
  {
    ok++;
  }
}

void readTags()
{
  ok = -1;

  if (rfid.isCard()) {
    if (rfid.readCardSerial()) {
      for (int i = 0; i < 5; i++) {
        newtag[i] = rfid.serNum[i];
      }
    }
    for (int i = 0; i < 5; i++) {
      Serial.print(newtag[i]);
      Serial.println(",");
    }

    checkTags();
    delay(300);

    rfid.halt();

    // now do something based on tag type
    if (ok > 0) // if we had a match
    {
      Serial.println("Accepted");
      //      digitalWrite(beepPin, HIGH);
      digitalWrite(beepPin, HIGH);
      delay(1000);
      digitalWrite(beepPin, LOW);
      u8g.firstPage();
      do {
        u8g.drawBitmapP(2, 0, 7, 64, cake);
        u8g.drawBitmapP(75, 0, 6, 64, xuka);
      } while ( u8g.nextPage() );

      flag = true;

      ok = -1;
    }
    else if (ok == 0) // if we didn't have a match
    {
      Serial.println("Rejected");
      //      digitalWrite(no, LOW);
      //      delay(1000);
      //      digitalWrite(no, HIGH);

      ok = -1;
    }
  }
}
